---
description: 
globs: 
alwaysApply: true
---
# Speech-to-Text Bubble Display Web App Architecture

## System Overview

This NextJS application displays transcribed speech in real-time as individual word bubbles, with words fading after 2 seconds unless pinned by the user. The system leverages WhisperX for accurate speech transcription.

```
┌─────────────────────────────────────────────────────────────┐
│                      Client Browser                         │
│                                                             │
│  ┌─────────────┐    ┌────────────────┐    ┌──────────────┐  │
│  │ Audio Input │───▶│ Speech Capture │───▶│ WebSocket    │  │
│  └─────────────┘    └────────────────┘    │ Connection   │  │
│                                           └──────┬───────┘  │
│                                                  │          │
│  ┌─────────────────────────────────┐             │          │
│  │ React UI Components             │             │          │
│  │ ┌─────────────┐ ┌────────────┐  │◀────────────┘          │
│  │ │ Word Bubbles│ │ Controls   │  │                        │
│  │ └─────────────┘ └────────────┘  │                        │
│  └─────────────────────────────────┘                        │
└─────────────────────────────────────────────────────────────┘
                          ▲
                          │
                          ▼
┌─────────────────────────────────────────────────────────────┐
│                        NextJS Server                        │
│                                                             │
│  ┌────────────────┐    ┌────────────────┐                   │
│  │ Socket         │───▶│ Audio Buffer   │                   │
│  │ Service        │    │ Service        │                   │
│  └────────────────┘    └───────┬────────┘                   │
│                                │                            │
│                                ▼                            │
│  ┌────────────────────────────────────────────────────┐     │
│  │ WhisperX Integration                                │     │
│  │                                                     │     │
│  │  ┌────────────────┐    ┌─────────────────────────┐ │     │
│  │  │ Python Process │◀──▶│ WhisperX Python         │ │     │
│  │  │ Manager        │    │ Wrapper                 │ │     │
│  │  └────────────────┘    └─────────────────────────┘ │     │
│  └────────────────────────────────────────────────────┘     │
└─────────────────────────────────────────────────────────────┘
```

## Core Components

### Frontend Components

1. **AudioService**
   - Manages microphone access and permissions 
   - Buffers audio input for streaming
   - Handles audio state (active/inactive)

2. **WordBubble Component**
   - Renders individual word bubbles
   - Manages animations (appearance, fading)
   - Handles user interactions (pinning/unpinning)

3. **Controls Component**
   - Contains the ToggleSwitch for activation
   - Displays system status indicators
   - Shows connection status

4. **Socket Client**
   - Establishes real-time connection with backend
   - Streams audio data to server
   - Receives transcribed words with timestamps

### Backend Services

1. **SocketService**
   - Manages WebSocket connections
   - Handles audio data streaming
   - Routes transcription results to clients

2. **BufferService**
   - Processes incoming audio chunks
   - Prepares data for WhisperX processing
   - Manages audio segment boundaries

3. **WhisperService**
   - Interfaces with PythonProcessManager
   - Manages WhisperX process lifecycle
   - Processes transcription results

4. **SessionService**
   - Maintains session state
   - Tracks word history and pinned items
   - Handles session cleanup

## Technology Stack

1. **Frontend**
   - NextJS (React framework)
   - TypeScript
   - TailwindCSS for styling
   - Web Audio API for microphone access

2. **Backend**
   - NextJS API routes
   - Node.js child process for Python integration
   - WebSocket for real-time communication

3. **Speech Processing**
   - WhisperX Python package
   - Child process for Node.js to Python communication
   - JSON-based message protocol

## Implementation Approach

### WhisperX Integration

The application uses a Python process approach for integrating WhisperX:

- PythonProcessManager spawns Python processes from Node.js
- Audio data is passed via standard I/O with JSON encoding
- whisperx_wrapper.py loads WhisperX and processes audio chunks
- Results with word-level timestamps are returned to Node.js
- Graceful fallback to mock implementation when WhisperX is unavailable

### Real-time Processing Pipeline

1. Audio is captured in the browser via the Web Audio API
2. Audio chunks are sent to the server via WebSocket
3. Server buffers audio and passes it to WhisperX
4. WhisperX processes audio and returns words with timestamps
5. Results are streamed back to client in real-time
6. Frontend displays word bubbles and manages their lifecycle

### Data Flow

```
┌────────────┐     ┌────────────┐     ┌────────────┐     ┌────────────┐
│            │     │            │     │            │     │            │
│  Capture   │────▶│  Buffer    │────▶│ WhisperX   │────▶│ Process    │
│  Audio     │     │  Audio     │     │ Processing │     │ Results    │
│            │     │            │     │            │     │            │
└────────────┘     └────────────┘     └────────────┘     └────────────┘
       │                                                        │
       │                                                        │
       ▼                                                        ▼
┌────────────┐                                           ┌────────────┐
│            │                                           │            │
│  Client    │◀─────────────────────────────────────────│  Server    │
│  Browser   │                                           │  Backend   │
│            │                                           │            │
└────────────┘                                           └────────────┘
``` 